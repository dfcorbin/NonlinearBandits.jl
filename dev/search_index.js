var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NonlinearBandits","category":"page"},{"location":"#NonlinearBandits","page":"Home","title":"NonlinearBandits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NonlinearBandits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NonlinearBandits]","category":"page"},{"location":"#NonlinearBandits.BayesLM-Tuple{Int64}","page":"Home","title":"NonlinearBandits.BayesLM","text":"BayesLM(d::Int; <keyword arguments>)\n\nConstruct a Bayesian linear model.\n\nArguments\n\nλ::tFloat64=1.0: Prior scaling.\nshape0::Float64=1e-3: Inverse-gamma prior shape hyperparameter.\nscale0::Float64=1e-3: Inverse-gamma prior scale hyperparameter.\n\n\n\n\n\n","category":"method"},{"location":"#NonlinearBandits.BayesPM-Tuple{Vector{Index}, AbstractMatrix}","page":"Home","title":"NonlinearBandits.BayesPM","text":"BayesPM(basis::Vector{Index}, limits::AbstractMatrix; λ::Float64=1.0,\n        shape0::Float64=1e-3, scale0::Float64=1e-3)\n\nConstruct a Bayesian linear model on polynomial features.\n\nArguments\n\nbasis::Vector{Index}: Vector of monomial indices.\nlimits::AbstractMatrix: Matrix with two columns defining the lower/upper limits of the space.\nλ::Float64=1.0: Prior covariance scale factor.\nshape0::Float64=1e-3: Inverse-gamma prior shape hyperparameter.\nscale0::Float64=1e=3: Inverse-gamma prior scale hyperparameter.\n\n\n\n\n\n","category":"method"},{"location":"#NonlinearBandits.Index","page":"Home","title":"NonlinearBandits.Index","text":"Index(dim::Vector{Int64}, deg::Vector{Int64})\n\nMultivariate monomial index.\n\nThe monomial x[1] * x[3]^2can be encoded usingdim = [1, 3],deg = [1, 2]`\n\n\n\n\n\n","category":"type"},{"location":"#NonlinearBandits.expand-Tuple{AbstractMatrix, Vector{Index}, AbstractMatrix}","page":"Home","title":"NonlinearBandits.expand","text":"expand(X::AbstractMatrix, basis::Vector{Index}, limits::AbstractMatrix;\n       J::Union{Nothing,Int64}=nothing)\n\nExpand the columns of X into a rescaled legendre polynomial basis.\n\nArguments\n\nX::AbstractMatrix: Matrix with observations stored as columns.\nbasis::Vector{<:Index}: Vector of monomial indices.\nlimits::AbstractMatrix: Matrix with two columns defining the lower/upper limits of the space.\nJ::Union{Nothing, Int64}=nothing: The maximum degree of the basis. Inferred if not specified.\n\n\n\n\n\n","category":"method"},{"location":"#NonlinearBandits.fit!-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"NonlinearBandits.fit!","text":"fit!(model, X::AbstractMatrix, y::AbstractMatrix)\n\nUpdate the parameters of model.\n\nArguments\n\nX::AbstractMatrix: A matrix with observations stored as columns.\ny::AbstractMatrix: A matrix with 1 row of response variables. \n\n\n\n\n\n","category":"method"},{"location":"#NonlinearBandits.std-Tuple{BayesLM}","page":"Home","title":"NonlinearBandits.std","text":"std(lm::BayesLM)\n\nComputed the posterior expected standard deviation from the model lm.\n\n\n\n\n\n","category":"method"},{"location":"#NonlinearBandits.tpbasis-Tuple{Int64, Int64}","page":"Home","title":"NonlinearBandits.tpbasis","text":"tpbasis(d::Int64, J::Int64)\n\nConstruct the d-dimensional truncated tensor-product basis.\n\nAll index terms have a degree ≤ J.\n\nSee also Index\n\n\n\n\n\n","category":"method"},{"location":"regression_tutorial/#Tutorial","page":"Models","title":"Tutorial","text":"","category":"section"},{"location":"regression_tutorial/","page":"Models","title":"Models","text":"This tutorial outlines some of the available models in NonlinearBandits.jl. First we generate some synthetic data to work with.","category":"page"},{"location":"regression_tutorial/","page":"Models","title":"Models","text":"using NonlinearBandits, Plots\n\nd, n = 1, 500\nf(x) = 10 * sin(10^x[1] * x[1])\nX, y = NonlinearBandits.gaussian_data(d, n, f)\ndata_plt = plot(X[1, :], y[1, :], label=nothing, alpha=0.3, legend=:topleft, st=:scatter)","category":"page"},{"location":"regression_tutorial/#Bayesian-Linear-Model","page":"Models","title":"Bayesian Linear Model","text":"","category":"section"},{"location":"regression_tutorial/","page":"Models","title":"Models","text":"A simple Bayesian linear model is implemented by the BayesLM type.","category":"page"},{"location":"regression_tutorial/","page":"Models","title":"Models","text":"lm = BayesLM(d)\nfit!(lm, X, y)\n\nxplt = 0:0.01:1\nxplt = reshape(xplt, (1, :))\nyplt = lm(xplt) # Call model object to make predictions\nplot(data_plt, xplt[1, :], yplt[1, :], label=\"Linear model\")","category":"page"},{"location":"regression_tutorial/#Bayesian-Polynomial-Model","page":"Models","title":"Bayesian Polynomial Model","text":"","category":"section"},{"location":"regression_tutorial/","page":"Models","title":"Models","text":"Using a BayesPM object, we can create a wrapper for the BayesLM class, which first applies a polynomial expansion to the features.","category":"page"},{"location":"regression_tutorial/","page":"Models","title":"Models","text":"limits = repeat([0.0 1.0], d, 1) # Define hyperrectangular limits of the feature space\nbasis = tpbasis(d, 3) # Use the degree-3 truncated polynomial tensor-product basis\npm = BayesPM(basis, limits)\nfit!(pm, X, y)\nyplt = pm(xplt) \nplot(data_plt, xplt[1, :], yplt[1, :], label=\"Polynoimal model\")","category":"page"}]
}
